// Generated from lib/calculator.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class calculatorLexer extends Lexer {
	public static readonly FLOOR = 1;
	public static readonly CEIL = 2;
	public static readonly ROUND = 3;
	public static readonly ROUND2 = 4;
	public static readonly COS = 5;
	public static readonly SIN = 6;
	public static readonly TAN = 7;
	public static readonly ACOS = 8;
	public static readonly ASIN = 9;
	public static readonly ATAN = 10;
	public static readonly LN = 11;
	public static readonly LOG = 12;
	public static readonly SQRT = 13;
	public static readonly LPAREN = 14;
	public static readonly RPAREN = 15;
	public static readonly PLUS = 16;
	public static readonly MINUS = 17;
	public static readonly TIMES = 18;
	public static readonly DIV = 19;
	public static readonly GT = 20;
	public static readonly LT = 21;
	public static readonly EQ = 22;
	public static readonly COMMA = 23;
	public static readonly POINT = 24;
	public static readonly POW = 25;
	public static readonly PI = 26;
	public static readonly EULER = 27;
	public static readonly VARIABLE = 28;
	public static readonly SCIENTIFIC_NUMBER = 29;
	public static readonly WS = 30;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"FLOOR", "CEIL", "ROUND", "ROUND2", "COS", "SIN", "TAN", "ACOS", "ASIN", 
		"ATAN", "LN", "LOG", "SQRT", "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", 
		"DIV", "GT", "LT", "EQ", "COMMA", "POINT", "POW", "PI", "EULER", "VARIABLE", 
		"VALID_ID_START", "VALID_ID_CHAR", "SCIENTIFIC_NUMBER", "DIGIT", "NUMBER", 
		"E1", "E2", "SIGN", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'floor'", "'ceil'", "'round'", "'round2'", "'cos'", "'sin'", 
		"'tan'", "'acos'", "'asin'", "'atan'", "'ln'", "'log'", "'sqrt'", "'('", 
		"')'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'='", "','", "'.'", 
		"'^'", "'pi'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "FLOOR", "CEIL", "ROUND", "ROUND2", "COS", "SIN", "TAN", "ACOS", 
		"ASIN", "ATAN", "LN", "LOG", "SQRT", "LPAREN", "RPAREN", "PLUS", "MINUS", 
		"TIMES", "DIV", "GT", "LT", "EQ", "COMMA", "POINT", "POW", "PI", "EULER", 
		"VARIABLE", "SCIENTIFIC_NUMBER", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(calculatorLexer._LITERAL_NAMES, calculatorLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return calculatorLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(calculatorLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "calculator.g4"; }

	// @Override
	public get ruleNames(): string[] { return calculatorLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return calculatorLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return calculatorLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return calculatorLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02 \xE2\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03" +
		"\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10" +
		"\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14" +
		"\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19" +
		"\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D" +
		"\x03\x1D\x07\x1D\xAC\n\x1D\f\x1D\x0E\x1D\xAF\v\x1D\x03\x1E\x05\x1E\xB2" +
		"\n\x1E\x03\x1F\x03\x1F\x05\x1F\xB6\n\x1F\x03 \x03 \x03 \x05 \xBB\n \x03" +
		" \x05 \xBE\n \x03 \x03 \x05 \xC2\n \x03!\x06!\xC5\n!\r!\x0E!\xC6\x03\"" +
		"\x06\"\xCA\n\"\r\"\x0E\"\xCB\x03\"\x03\"\x06\"\xD0\n\"\r\"\x0E\"\xD1\x05" +
		"\"\xD4\n\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x06&\xDD\n&\r&\x0E&\xDE" +
		"\x03&\x03&\x02\x02\x02\'\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06" +
		"\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
		"\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14" +
		"\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02" +
		"\x1C7\x02\x1D9\x02\x1E;\x02\x02=\x02\x02?\x02\x1FA\x02\x02C\x02\x02E\x02" +
		"\x02G\x02\x02I\x02\x02K\x02 \x03\x02\x05\x05\x02C\\aac|\x04\x02--//\x05" +
		"\x02\v\f\x0F\x0F\"\"\x02\xE4\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02" +
		"\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02" +
		"\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02" +
		"\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02" +
		"%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03" +
		"\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02" +
		"\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x02" +
		"9\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x03M\x03\x02" +
		"\x02\x02\x05S\x03\x02\x02\x02\x07X\x03\x02\x02\x02\t^\x03\x02\x02\x02" +
		"\ve\x03\x02\x02\x02\ri\x03\x02\x02\x02\x0Fm\x03\x02\x02\x02\x11q\x03\x02" +
		"\x02\x02\x13v\x03\x02\x02\x02\x15{\x03\x02\x02\x02\x17\x80\x03\x02\x02" +
		"\x02\x19\x83\x03\x02\x02\x02\x1B\x87\x03\x02\x02\x02\x1D\x8C\x03\x02\x02" +
		"\x02\x1F\x8E\x03\x02\x02\x02!\x90\x03\x02\x02\x02#\x92\x03\x02\x02\x02" +
		"%\x94\x03\x02\x02\x02\'\x96\x03\x02\x02\x02)\x98\x03\x02\x02\x02+\x9A" +
		"\x03\x02\x02\x02-\x9C\x03\x02\x02\x02/\x9E\x03\x02\x02\x021\xA0\x03\x02" +
		"\x02\x023\xA2\x03\x02\x02\x025\xA4\x03\x02\x02\x027\xA7\x03\x02\x02\x02" +
		"9\xA9\x03\x02\x02\x02;\xB1\x03\x02\x02\x02=\xB5\x03\x02\x02\x02?\xB7\x03" +
		"\x02\x02\x02A\xC4\x03\x02\x02\x02C\xC9\x03\x02\x02\x02E\xD5\x03\x02\x02" +
		"\x02G\xD7\x03\x02\x02\x02I\xD9\x03\x02\x02\x02K\xDC\x03\x02\x02\x02MN" +
		"\x07h\x02\x02NO\x07n\x02\x02OP\x07q\x02\x02PQ\x07q\x02\x02QR\x07t\x02" +
		"\x02R\x04\x03\x02\x02\x02ST\x07e\x02\x02TU\x07g\x02\x02UV\x07k\x02\x02" +
		"VW\x07n\x02\x02W\x06\x03\x02\x02\x02XY\x07t\x02\x02YZ\x07q\x02\x02Z[\x07" +
		"w\x02\x02[\\\x07p\x02\x02\\]\x07f\x02\x02]\b\x03\x02\x02\x02^_\x07t\x02" +
		"\x02_`\x07q\x02\x02`a\x07w\x02\x02ab\x07p\x02\x02bc\x07f\x02\x02cd\x07" +
		"4\x02\x02d\n\x03\x02\x02\x02ef\x07e\x02\x02fg\x07q\x02\x02gh\x07u\x02" +
		"\x02h\f\x03\x02\x02\x02ij\x07u\x02\x02jk\x07k\x02\x02kl\x07p\x02\x02l" +
		"\x0E\x03\x02\x02\x02mn\x07v\x02\x02no\x07c\x02\x02op\x07p\x02\x02p\x10" +
		"\x03\x02\x02\x02qr\x07c\x02\x02rs\x07e\x02\x02st\x07q\x02\x02tu\x07u\x02" +
		"\x02u\x12\x03\x02\x02\x02vw\x07c\x02\x02wx\x07u\x02\x02xy\x07k\x02\x02" +
		"yz\x07p\x02\x02z\x14\x03\x02\x02\x02{|\x07c\x02\x02|}\x07v\x02\x02}~\x07" +
		"c\x02\x02~\x7F\x07p\x02\x02\x7F\x16\x03\x02\x02\x02\x80\x81\x07n\x02\x02" +
		"\x81\x82\x07p\x02\x02\x82\x18\x03\x02\x02\x02\x83\x84\x07n\x02\x02\x84" +
		"\x85\x07q\x02\x02\x85\x86\x07i\x02\x02\x86\x1A\x03\x02\x02\x02\x87\x88" +
		"\x07u\x02\x02\x88\x89\x07s\x02\x02\x89\x8A\x07t\x02\x02\x8A\x8B\x07v\x02" +
		"\x02\x8B\x1C\x03\x02\x02\x02\x8C\x8D\x07*\x02\x02\x8D\x1E\x03\x02\x02" +
		"\x02\x8E\x8F\x07+\x02\x02\x8F \x03\x02\x02\x02\x90\x91\x07-\x02\x02\x91" +
		"\"\x03\x02\x02\x02\x92\x93\x07/\x02\x02\x93$\x03\x02\x02\x02\x94\x95\x07" +
		",\x02\x02\x95&\x03\x02\x02\x02\x96\x97\x071\x02\x02\x97(\x03\x02\x02\x02" +
		"\x98\x99\x07@\x02\x02\x99*\x03\x02\x02\x02\x9A\x9B\x07>\x02\x02\x9B,\x03" +
		"\x02\x02\x02\x9C\x9D\x07?\x02\x02\x9D.\x03\x02\x02\x02\x9E\x9F\x07.\x02" +
		"\x02\x9F0\x03\x02\x02\x02\xA0\xA1\x070\x02\x02\xA12\x03\x02\x02\x02\xA2" +
		"\xA3\x07`\x02\x02\xA34\x03\x02\x02\x02\xA4\xA5\x07r\x02\x02\xA5\xA6\x07" +
		"k\x02\x02\xA66\x03\x02\x02\x02\xA7\xA8\x05G$\x02\xA88\x03\x02\x02\x02" +
		"\xA9\xAD\x05;\x1E\x02\xAA\xAC\x05=\x1F\x02\xAB\xAA\x03\x02\x02\x02\xAC" +
		"\xAF\x03\x02\x02\x02\xAD\xAB\x03\x02\x02\x02\xAD\xAE\x03\x02\x02\x02\xAE" +
		":\x03\x02\x02\x02\xAF\xAD\x03\x02\x02\x02\xB0\xB2\t\x02\x02\x02\xB1\xB0" +
		"\x03\x02\x02\x02\xB2<\x03\x02\x02\x02\xB3\xB6\x05;\x1E\x02\xB4\xB6\x04" +
		"2;\x02\xB5\xB3\x03\x02\x02\x02\xB5\xB4\x03\x02\x02\x02\xB6>\x03\x02\x02" +
		"\x02\xB7\xC1\x05C\"\x02\xB8\xBB\x05E#\x02\xB9\xBB\x05G$\x02\xBA\xB8\x03" +
		"\x02\x02\x02\xBA\xB9\x03\x02\x02\x02\xBB\xBD\x03\x02\x02\x02\xBC\xBE\x05" +
		"I%\x02\xBD\xBC\x03\x02\x02\x02\xBD\xBE\x03\x02\x02\x02\xBE\xBF\x03\x02" +
		"\x02\x02\xBF\xC0\x05A!\x02\xC0\xC2\x03\x02\x02\x02\xC1\xBA\x03\x02\x02" +
		"\x02\xC1\xC2\x03\x02\x02\x02\xC2@\x03\x02\x02\x02\xC3\xC5\x042;\x02\xC4" +
		"\xC3\x03\x02\x02\x02\xC5\xC6\x03\x02\x02\x02\xC6\xC4\x03\x02\x02\x02\xC6" +
		"\xC7\x03\x02\x02\x02\xC7B\x03\x02\x02\x02\xC8\xCA\x042;\x02\xC9\xC8\x03" +
		"\x02\x02\x02\xCA\xCB\x03\x02\x02\x02\xCB\xC9\x03\x02\x02\x02\xCB\xCC\x03" +
		"\x02\x02\x02\xCC\xD3\x03\x02\x02\x02\xCD\xCF\x070\x02\x02\xCE\xD0\x04" +
		"2;\x02\xCF\xCE\x03\x02\x02\x02\xD0\xD1\x03\x02\x02\x02\xD1\xCF\x03\x02" +
		"\x02\x02\xD1\xD2\x03\x02\x02\x02\xD2\xD4\x03\x02\x02\x02\xD3\xCD\x03\x02" +
		"\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4D\x03\x02\x02\x02\xD5\xD6\x07G\x02" +
		"\x02\xD6F\x03\x02\x02\x02\xD7\xD8\x07g\x02\x02\xD8H\x03\x02\x02\x02\xD9" +
		"\xDA\t\x03\x02\x02\xDAJ\x03\x02\x02\x02\xDB\xDD\t\x04\x02\x02\xDC\xDB" +
		"\x03\x02\x02\x02\xDD\xDE\x03\x02\x02\x02\xDE\xDC\x03\x02\x02\x02\xDE\xDF" +
		"\x03\x02\x02\x02\xDF\xE0\x03\x02\x02\x02\xE0\xE1\b&\x02\x02\xE1L\x03\x02" +
		"\x02\x02\x0E\x02\xAD\xB1\xB5\xBA\xBD\xC1\xC6\xCB\xD1\xD3\xDE\x03\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!calculatorLexer.__ATN) {
			calculatorLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(calculatorLexer._serializedATN));
		}

		return calculatorLexer.__ATN;
	}

}

